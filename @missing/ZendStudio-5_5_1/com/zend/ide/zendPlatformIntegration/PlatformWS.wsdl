<?xml version='1.0' encoding='UTF-8'?>

<!-- WSDL file generated by Zend Studio. -->

<definitions name="PlatformWS" targetNamespace="urn:PlatformWS" xmlns:typens="urn:PlatformWS" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/">
	<types>
		<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:PlatformWS">
			<xsd:complexType name="ServiceResponse">
				<xsd:all>
					<xsd:element name="response" type="xsd:anyType"/>
					<xsd:element name="return_code" type="xsd:boolean"/>
					<xsd:element name="return_msg" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="DirectiveServiceResponse">
				<xsd:all>
					<xsd:element name="response" type="typens:DirectiveDetailsArray"/>
					<xsd:element name="return_code" type="xsd:boolean"/>
					<xsd:element name="return_msg" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="EventServiceResponse">
				<xsd:all>
					<xsd:element name="response" type="typens:EventDetailsArray"/>
					<xsd:element name="return_code" type="xsd:boolean"/>
					<xsd:element name="return_msg" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FilterOptionsServiceResponse">
				<xsd:all>
					<xsd:element name="response" type="typens:FilterOptionsArray"/>
					<xsd:element name="return_code" type="xsd:boolean"/>
					<xsd:element name="return_msg" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="DirectiveDetailsArray">
				<xsd:complexContent>
					<xsd:restriction base="soapenc:Array">
						<xsd:attribute ref="soapenc:arrayType" wsdl:arrayType="typens:DirectiveDetails[]"/>
					</xsd:restriction>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:complexType name="EventDetailsArray">
				<xsd:complexContent>
					<xsd:restriction base="soapenc:Array">
						<xsd:attribute ref="soapenc:arrayType" wsdl:arrayType="typens:EventDetails[]"/>
					</xsd:restriction>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:complexType name="FilterOptionsArray">
				<xsd:complexContent>
					<xsd:restriction base="soapenc:Array">
						<xsd:attribute ref="soapenc:arrayType" wsdl:arrayType="typens:FilterOptions[]"/>
					</xsd:restriction>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:complexType name="DirectiveDetails">
				<xsd:all>
					<xsd:element name="current_value" type="xsd:string"/>
					<xsd:element name="directive_name" type="xsd:string"/>
					<xsd:element name="ini_file" type="xsd:string"/>
					<xsd:element name="loaded_value" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="EventDetails">
				<xsd:all>
					<xsd:element name="aggregation_hint" type="xsd:string"/>
					<xsd:element name="avg_triggered_value" type="xsd:integer"/>
					<xsd:element name="backtrace" type="xsd:anyType"/>
					<xsd:element name="cpu_load" type="xsd:integer"/>
					<xsd:element name="custom_name" type="xsd:string"/>
					<xsd:element name="data_vars" type="xsd:anyType"/>
					<xsd:element name="error_text" type="xsd:string"/>
					<xsd:element name="error_type" type="xsd:integer"/>
					<xsd:element name="first_occurence" type="xsd:integer"/>
					<xsd:element name="function_name" type="xsd:string"/>
					<xsd:element name="function_parameters" type="xsd:anyType"/>
					<xsd:element name="id" type="xsd:integer"/>
					<xsd:element name="include_files" type="xsd:anyType"/>
					<xsd:element name="is_preserved" type="xsd:boolean"/>
					<xsd:element name="last_occurence" type="xsd:integer"/>
					<xsd:element name="location" type="xsd:string"/>
					<xsd:element name="number_of_occurences" type="xsd:integer"/>
					<xsd:element name="severity" type="xsd:string"/>
					<xsd:element name="source_file" type="xsd:string"/>
					<xsd:element name="source_line" type="xsd:integer"/>
					<xsd:element name="status" type="xsd:string"/>
					<xsd:element name="triggered_value" type="xsd:integer"/>
					<xsd:element name="type" type="xsd:string"/>
					<xsd:element name="url" type="xsd:string"/>
					<xsd:element name="url_schema" type="xsd:string"/>
					<xsd:element name="vhost" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FilterOptions">
				<xsd:all>
					<xsd:element name="key" type="xsd:anyType"/>
					<xsd:element name="value" type="xsd:anyType"/>
				</xsd:all>
			</xsd:complexType>
		</xsd:schema>
	</types>
	<message name="addAllowedHostOnCluster">
		<part name="cluster" type="xsd:string"/>
		<part name="host_ip" type="xsd:string"/>
	</message>
	<message name="addAllowedHostOnClusterResponse">
		<part name="addAllowedHostOnClusterReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="addAllowedHostOnServer">
		<part name="server" type="xsd:string"/>
		<part name="host_ip1" type="xsd:string"/>
	</message>
	<message name="addAllowedHostOnServerResponse">
		<part name="addAllowedHostOnServerReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="closeEvent">
		<part name="event_id" type="xsd:integer"/>
	</message>
	<message name="closeEventResponse">
		<part name="closeEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="debugEvent">
		<part name="event_id1" type="xsd:integer"/>
	</message>
	<message name="debugEventResponse">
		<part name="debugEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="deleteEvent">
		<part name="event_id2" type="xsd:integer"/>
	</message>
	<message name="deleteEventResponse">
		<part name="deleteEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="getAllDirectives">
		<part name="server1" type="xsd:string"/>
	</message>
	<message name="getAllDirectivesResponse">
		<part name="getAllDirectivesReturn" type="typens:DirectiveServiceResponse"/>
	</message>
	<message name="getAllEvents">
		<part name="filter_array" type="xsd:anyType"/>
		<part name="offset" type="xsd:integer"/>
		<part name="num_of_rows" type="xsd:integer"/>
		<part name="sort_by" type="xsd:string"/>
		<part name="desc_order" type="xsd:boolean"/>
	</message>
	<message name="getAllEventsResponse">
		<part name="getAllEventsReturn" type="typens:EventServiceResponse"/>
	</message>
	<message name="getDirective">
		<part name="server2" type="xsd:string"/>
		<part name="name" type="xsd:string"/>
	</message>
	<message name="getDirectiveResponse">
		<part name="getDirectiveReturn" type="typens:DirectiveServiceResponse"/>
	</message>
	<message name="getEventData">
		<part name="event_id3" type="xsd:integer"/>
	</message>
	<message name="getEventDataResponse">
		<part name="getEventDataReturn" type="typens:EventServiceResponse"/>
	</message>
	<message name="getEventFilterAvailableOptions">
		<part name="filter_name" type="xsd:string"/>
	</message>
	<message name="getEventFilterAvailableOptionsResponse">
		<part name="getEventFilterAvailableOptionsReturn" type="typens:FilterOptionsServiceResponse"/>
	</message>
	<message name="getEventFilterNames"/>
	<message name="getEventFilterNamesResponse">
		<part name="getEventFilterNamesReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="getEventSortOptions"/>
	<message name="getEventSortOptionsResponse">
		<part name="getEventSortOptionsReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="getServers"/>
	<message name="getServersResponse">
		<part name="getServersReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="getTotalNumberOfEvents">
		<part name="filter_array1" type="xsd:anyType"/>
	</message>
	<message name="getTotalNumberOfEventsResponse">
		<part name="getTotalNumberOfEventsReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="getVersion"/>
	<message name="getVersionResponse">
		<part name="getVersionReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="ignoreEvent">
		<part name="event_id4" type="xsd:integer"/>
	</message>
	<message name="ignoreEventResponse">
		<part name="ignoreEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="isHostAllowed">
		<part name="server3" type="xsd:string"/>
		<part name="host_ip2" type="xsd:string"/>
	</message>
	<message name="isHostAllowedResponse">
		<part name="isHostAllowedReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="login">
		<part name="username" type="xsd:string"/>
		<part name="password" type="xsd:string"/>
	</message>
	<message name="loginResponse">
		<part name="loginReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="preserveEvent">
		<part name="event_id5" type="xsd:integer"/>
	</message>
	<message name="preserveEventResponse">
		<part name="preserveEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="profileEvent">
		<part name="event_id6" type="xsd:integer"/>
	</message>
	<message name="profileEventResponse">
		<part name="profileEventReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="removeAllowedHostFromCluster">
		<part name="cluster1" type="xsd:string"/>
		<part name="host_ip3" type="xsd:string"/>
	</message>
	<message name="removeAllowedHostFromClusterResponse">
		<part name="removeAllowedHostFromClusterReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="removeAllowedHostFromServer">
		<part name="server4" type="xsd:string"/>
		<part name="host_ip4" type="xsd:string"/>
	</message>
	<message name="removeAllowedHostFromServerResponse">
		<part name="removeAllowedHostFromServerReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="restartCluster">
		<part name="cluster2" type="xsd:string"/>
		<part name="password1" type="xsd:string"/>
		<part name="gracefull" type="xsd:boolean"/>
	</message>
	<message name="restartClusterResponse">
		<part name="restartClusterReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="restartServer">
		<part name="server5" type="xsd:string"/>
		<part name="password2" type="xsd:string"/>
		<part name="gracefull1" type="xsd:boolean"/>
	</message>
	<message name="restartServerResponse">
		<part name="restartServerReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="setDirectiveOnCluster">
		<part name="cluster3" type="xsd:string"/>
		<part name="name1" type="xsd:string"/>
		<part name="value" type="xsd:string"/>
		<part name="ini_file" type="xsd:string"/>
		<part name="password3" type="xsd:string"/>
	</message>
	<message name="setDirectiveOnClusterResponse">
		<part name="setDirectiveOnClusterReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="setDirectiveOnServer">
		<part name="server6" type="xsd:string"/>
		<part name="name2" type="xsd:string"/>
		<part name="value1" type="xsd:string"/>
		<part name="ini_file1" type="xsd:string"/>
		<part name="password4" type="xsd:string"/>
	</message>
	<message name="setDirectiveOnServerResponse">
		<part name="setDirectiveOnServerReturn" type="typens:ServiceResponse"/>
	</message>
	<message name="unpreserveEvent">
		<part name="event_id7" type="xsd:integer"/>
	</message>
	<message name="unpreserveEventResponse">
		<part name="unpreserveEventReturn" type="typens:ServiceResponse"/>
	</message>
	<portType name="PlatformServicesPortType">
		<operation name="addAllowedHostOnCluster">
			<documentation>
				Adds the given host IP to the allow_hosts directive in the zend.ini file (if it's not already there), on all servers in the given cluster
			</documentation>
			<input message="typens:addAllowedHostOnCluster"/>
			<output message="typens:addAllowedHostOnClusterResponse"/>
		</operation>
		<operation name="addAllowedHostOnServer">
			<documentation>
				Adds the given host IP to the allow_hosts directive in the zend.ini file (if it's not already there)
			</documentation>
			<input message="typens:addAllowedHostOnServer"/>
			<output message="typens:addAllowedHostOnServerResponse"/>
		</operation>
		<operation name="closeEvent">
			<documentation>
				Changes the event's status in the DB to closed
			</documentation>
			<input message="typens:closeEvent"/>
			<output message="typens:closeEventResponse"/>
		</operation>
		<operation name="debugEvent">
			<documentation>
				Starts a debug session on the given event ID
			</documentation>
			<input message="typens:debugEvent"/>
			<output message="typens:debugEventResponse"/>
		</operation>
		<operation name="deleteEvent">
			<documentation>
				Deletes an event from database according to the given event ID number.
			</documentation>
			<input message="typens:deleteEvent"/>
			<output message="typens:deleteEventResponse"/>
		</operation>
		<operation name="getAllDirectives">
			<documentation>
				Returns all directive values (in the format of: array(DirectiveDetails('directive_name' => name, 'current_value' => value, 'loaded_value' => value, 'ini_file' => filename))) from the given server (in DirectiveServiceResponse object)
			</documentation>
			<input message="typens:getAllDirectives"/>
			<output message="typens:getAllDirectivesResponse"/>
		</operation>
		<operation name="getAllEvents">
			<documentation>
				Returns selected data about all the events that match the given filter (all events if filter was an empty array)
			</documentation>
			<input message="typens:getAllEvents"/>
			<output message="typens:getAllEventsResponse"/>
		</operation>
		<operation name="getDirective">
			<documentation>
				Returns all directive values (in the format of: array(DirectiveDetails('directive_name' => name, 'current_value' => value, 'loaded_value' => value, 'ini_file' => filename))) from the given server (in DirectiveServiceResponse object)
			</documentation>
			<input message="typens:getDirective"/>
			<output message="typens:getDirectiveResponse"/>
		</operation>
		<operation name="getEventData">
			<documentation>
				Returns all data available for a given event ID
			</documentation>
			<input message="typens:getEventData"/>
			<output message="typens:getEventDataResponse"/>
		</operation>
		<operation name="getEventFilterAvailableOptions">
			<documentation>
				Gets name of filter and returns all the options this filter can get
			</documentation>
			<input message="typens:getEventFilterAvailableOptions"/>
			<output message="typens:getEventFilterAvailableOptionsResponse"/>
		</operation>
		<operation name="getEventFilterNames">
			<documentation>
				Returns the name of the available filters
			</documentation>
			<input message="typens:getEventFilterNames"/>
			<output message="typens:getEventFilterNamesResponse"/>
		</operation>
		<operation name="getEventSortOptions">
			<documentation>
				Returns all possible values to sort
			</documentation>
			<input message="typens:getEventSortOptions"/>
			<output message="typens:getEventSortOptionsResponse"/>
		</operation>
		<operation name="getServers">
			<documentation>
				Returns an array of (cluster1 => (server1, server2...), cluster2 => (server4...), server3)
			</documentation>
			<input message="typens:getServers"/>
			<output message="typens:getServersResponse"/>
		</operation>
		<operation name="getTotalNumberOfEvents">
			<documentation>
				Returns the total number of events matching the given filter (all events if the filter was an empty array)
			</documentation>
			<input message="typens:getTotalNumberOfEvents"/>
			<output message="typens:getTotalNumberOfEventsResponse"/>
		</operation>
		<operation name="getVersion">
			<documentation>
				Returns the PlatformServices version
			</documentation>
			<input message="typens:getVersion"/>
			<output message="typens:getVersionResponse"/>
		</operation>
		<operation name="ignoreEvent">
			<documentation>
				Sets the event in the DB to be ignored
			</documentation>
			<input message="typens:ignoreEvent"/>
			<output message="typens:ignoreEventResponse"/>
		</operation>
		<operation name="isHostAllowed">
			<documentation>
				Checks if the given host IP is in the allow_hosts list but not in the deny_hosts list (meaning it is allowed to connect to the Zend Debugger module for either debug session or profile session)
			</documentation>
			<input message="typens:isHostAllowed"/>
			<output message="typens:isHostAllowedResponse"/>
		</operation>
		<operation name="login">
			<documentation>
				Login as the given username (using the given password).
			</documentation>
			<input message="typens:login"/>
			<output message="typens:loginResponse"/>
		</operation>
		<operation name="preserveEvent">
			<documentation>
				Changes the event's status in the DB to preserve
			</documentation>
			<input message="typens:preserveEvent"/>
			<output message="typens:preserveEventResponse"/>
		</operation>
		<operation name="profileEvent">
			<documentation>
				Starts a profile session on the given event ID
			</documentation>
			<input message="typens:profileEvent"/>
			<output message="typens:profileEventResponse"/>
		</operation>
		<operation name="removeAllowedHostFromCluster">
			<documentation>
				Removes the given host IP from the allow_hosts directive in the zend.ini file (and add it to the deny_hosts list) on all servers on the given cluster
			</documentation>
			<input message="typens:removeAllowedHostFromCluster"/>
			<output message="typens:removeAllowedHostFromClusterResponse"/>
		</operation>
		<operation name="removeAllowedHostFromServer">
			<documentation>
				Removes the given host IP from the allow_hosts directive in the zend.ini file (and add it to the deny_hosts list)
			</documentation>
			<input message="typens:removeAllowedHostFromServer"/>
			<output message="typens:removeAllowedHostFromServerResponse"/>
		</operation>
		<operation name="restartCluster">
			<documentation>
				Restarts web server on all servers in the given cluster
			</documentation>
			<input message="typens:restartCluster"/>
			<output message="typens:restartClusterResponse"/>
		</operation>
		<operation name="restartServer">
			<documentation>
				Restarts web server on the given server name
			</documentation>
			<input message="typens:restartServer"/>
			<output message="typens:restartServerResponse"/>
		</operation>
		<operation name="setDirectiveOnCluster">
			<documentation>
				Sets directive and value on all servers in the given cluster
			</documentation>
			<input message="typens:setDirectiveOnCluster"/>
			<output message="typens:setDirectiveOnClusterResponse"/>
		</operation>
		<operation name="setDirectiveOnServer">
			<documentation>
				Sets the directive name and value into the INI filename on the provided server
			</documentation>
			<input message="typens:setDirectiveOnServer"/>
			<output message="typens:setDirectiveOnServerResponse"/>
		</operation>
		<operation name="unpreserveEvent">
			<documentation>
				Changes the event's status in the DB to remove from 'preserve' status
			</documentation>
			<input message="typens:unpreserveEvent"/>
			<output message="typens:unpreserveEventResponse"/>
		</operation>
	</portType>
	<binding name="PlatformServicesBinding" type="typens:PlatformServicesPortType">
		<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="addAllowedHostOnCluster">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="addAllowedHostOnServer">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="closeEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="debugEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="deleteEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getAllDirectives">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getAllEvents">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getDirective">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getEventData">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getEventFilterAvailableOptions">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getEventFilterNames">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getEventSortOptions">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getServers">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getTotalNumberOfEvents">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="getVersion">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="ignoreEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="isHostAllowed">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="login">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="preserveEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="profileEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="removeAllowedHostFromCluster">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="removeAllowedHostFromServer">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="restartCluster">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="restartServer">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="setDirectiveOnCluster">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="setDirectiveOnServer">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
		<operation name="unpreserveEvent">
			<soap:operation soapAction="urn:PlatformServicesAction"/>
			<input>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body namespace="urn:PlatformWS" use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>
	</binding>
	<service name="PlatformWSService">
		<port name="PlatformServicesPort" binding="typens:PlatformServicesBinding">
			<soap:address location="http://fireforge/ZendPlatform/server/WebServices.php"/>
		</port>
	</service>
</definitions>
